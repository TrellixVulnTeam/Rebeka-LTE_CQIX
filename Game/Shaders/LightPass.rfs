#version 400

in vec2 texcoord;

uniform sampler2D color;
uniform sampler2D pos;
uniform sampler2D norm;
uniform samplerCube csm;

uniform vec3 mmv;

out vec4 ocolor;

struct LightPoint
{
vec3 position;
vec3 color;
};

uniform LightPoint light;

uniform float specular_power = 128.0;

vec3 sampleOffsetDirections[20] = vec3[]
(
   vec3( 1,  1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1,  1,  1), 
   vec3( 1,  1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1,  1, -1),
   vec3( 1,  1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1,  1,  0),
   vec3( 1,  0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1,  0, -1),
   vec3( 0,  1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0,  1, -1)
); 

mat4 rotationMatrix(vec3 axis, float angle)
{
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;
    
    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,
                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,
                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,
                0.0,                                0.0,                                0.0,                                1.0);
}

float calclum(in vec3 incol)
{
float lum = incol.x + incol.y + incol.z;
return lum / 3;
}

vec3 HDR(in vec3 incol)
{
vec3 ret = incol;
ret /= (calclum(incol) + 1.0f);
return ret;
}

float shadfetch(in vec3 dir)
{
return 1.012 * texture(csm, dir).r;
}


float cshad(in vec3 dir, in float d)
{
float s = shadfetch(dir);
if(s < d) //shadow
return 0.0;
return 1.0;
}


 

float PCFShad(vec3 fragToLight)
{
float shadow = 0.0;
float bias = 0.15;
int samples = 20;
float dist = length(fragToLight);
float diskRadius = 0.1;
for(int i = 0; i < samples; ++i)
{
    float closestDepth = texture(csm, fragToLight + sampleOffsetDirections[i] * diskRadius).r;
    //closestDepth *= far_plane;
    if(dist < closestDepth * 1.014)
        shadow += 1.0;
}
shadow /= float(samples);
return 0.05 + 0.95 * shadow; 
}



void main()
{

vec4 wpos = texture2D(pos, texcoord);
vec4 n = texture2D(norm, texcoord);
vec4 col;
col = texture2D(color, texcoord);


vec3 difsum = vec3(0,0,0);
vec3 spesum = difsum;
vec3 ambient_color = vec3(0.1, 0.1, 0.1);

vec3 ed = wpos.xyz - mmv;

vec3 L = wpos.xyz - light.position;

float svol = PCFShad(L);


float dist = length(L);
L = normalize(L);
vec3 N = normalize(n.xyz);



vec3 R = reflect(-L, N);
float NdotR = abs(dot(normalize(ed), R));
float NdotL =abs(dot(N, L));
float attenuation = 500.0 / (pow(dist, 2.0) + 1.0);

vec3 diffuse_color = light.color * col.rgb *
NdotL * attenuation;
vec3 specular_color = light.color *
pow(NdotR, specular_power)
* attenuation;



vec3 rgbout = HDR(ambient_color + (diffuse_color + specular_color)* svol);
ocolor = vec4(rgbout, 1.0);

}
